package com.vnu.library.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.border.EmptyBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.vnu.library.controller.BookInfoModel;
import com.vnu.library.data.BookInfo;
import com.vnu.library.data.ServerAPI;
import com.vnu.library.data.response.GettingAllBooksResponse;
import com.vnu.library.data.response.UpdatingBookResponse;
import javax.swing.SwingConstants;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author trant
 */
public class DisplayBookListInfo extends JFrame implements
		IUpdateAndAddingBookListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 2964879189532917732L;
	private ProgressDialog progressDialog;
	private final Gson gson = new Gson();
	private int currentPage = 1;
	private BookInfoModel bookInfoModel;
	private boolean isLastPage = false;
	/**
	 * Creates new form displayBookListInfo
	 */
	public DisplayBookListInfo() {
		setMinimumSize(new Dimension(650, 500));
		initComponents();
		getBookOfPage(currentPage);
	}

	private BookInfoModel getBookInfoModel() {
		if(bookInfoModel == null)
			bookInfoModel = new BookInfoModel(new ArrayList<>());
		
		return bookInfoModel;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		jToolBar1 = new javax.swing.JToolBar();
		jToolBar1.setAlignmentY(Component.CENTER_ALIGNMENT);
		jButton_AddBook = new javax.swing.JButton();
		jButton_AddBook.setIcon(new ImageIcon(DisplayBookListInfo.class
				.getResource("/resources/add_obj.gif")));
		jButton_AddBook.setFocusable(false);
		jButton_delBook = new javax.swing.JButton();
		jButton_delBook.setIcon(new ImageIcon(DisplayBookListInfo.class
				.getResource("/resources/delete_obj.gif")));
		jButton_delBook.setFocusable(false);
		jScrollPane1 = new javax.swing.JScrollPane();
		bookList = new JTable();
		bookList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Hệ thống quản lý sách thư viện");
		GridBagLayout gridBagLayout = new GridBagLayout();
		gridBagLayout.rowWeights = new double[]{0.0, 0.0, 1.0, 0.0};
		gridBagLayout.rowHeights = new int[] { 0, 0, 0, 19 };
		gridBagLayout.columnWeights = new double[] { 1.0 };
		getContentPane().setLayout(gridBagLayout);

		jToolBar1.setRollover(true);

		jButton_AddBook.setText("Thêm sách");
		jButton_AddBook.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jButton_AddBookMouseClicked(evt);
			}
		});
		jToolBar1.add(jButton_AddBook);

		jButton_delBook.setText("Xóa sách");
		jButton_delBook.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton_delBookActionPerformed(evt);
			}
		});
		jToolBar1.add(jButton_delBook);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new Insets(0, 0, 5, 0);
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
		gridBagConstraints.weightx = 0.1;
		getContentPane().add(jToolBar1, gridBagConstraints);
		
		
		bookList.setDefaultRenderer(Object.class, new ColorRenderer());
		bookList.setAutoCreateColumnsFromModel(false);
		bookList.setModel(getBookInfoModel());
		TableRowSorter<TableModel> rowSorter
        = new TableRowSorter<>(bookList.getModel());
		bookList.setRowSorter(rowSorter);
		bookList.setRowHeight(25);
		bookList.setAutoResizeMode(JTable.AUTO_RESIZE_NEXT_COLUMN);
		for (int i = 0; i < BookInfoModel.m_columns.length; i++) {
			TableColumn column = new TableColumn(i,
					BookInfoModel.m_columns[i].width);
			if (i == 0) {// STT
				column.setResizable(false);
				column.setMaxWidth(BookInfoModel.m_columns[i].width);
			}
			bookList.addColumn(column);
		}

		bookList.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				bookListMouseClicked(evt);
			}
			
			@Override
			public void mousePressed(MouseEvent e) {
				showPopup(e);
			}
			
			@Override
			public void mouseReleased(MouseEvent e) {
				showPopup(e);
			}
			
			 private void showPopup(MouseEvent e) {
	                if (e.isPopupTrigger()) {
	                    popup.show(e.getComponent(),
	                            e.getX(), e.getY());
	                }
	         }
		});
		jScrollPane1.setViewportView(bookList);
		bookList.getAccessibleContext().setAccessibleName("");

		gridBagConstraints_1 = new java.awt.GridBagConstraints();
		gridBagConstraints_1.insets = new Insets(0, 0, 5, 0);
		gridBagConstraints_1.gridx = 0;
		gridBagConstraints_1.gridy = 1;
		gridBagConstraints_1.gridwidth = java.awt.GridBagConstraints.RELATIVE;
		gridBagConstraints_1.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints_1.anchor = java.awt.GridBagConstraints.PAGE_END;
		gridBagConstraints_1.weighty = 0.6;
		getContentPane().add(jScrollPane1, gridBagConstraints_1);
		
		panel = new JPanel();
		GridBagConstraints gbc_panel = new GridBagConstraints();
		gbc_panel.insets = new Insets(0, 0, 5, 0);
		gbc_panel.fill = GridBagConstraints.BOTH;
		gbc_panel.gridx = 0;
		gbc_panel.gridy = 2;
		getContentPane().add(panel, gbc_panel);
		GridBagLayout gbl_panel = new GridBagLayout();
		gbl_panel.columnWidths = new int[]{5, 0, 277, 0, 41, 0, 0};
		gbl_panel.rowHeights = new int[]{23, 0};
		gbl_panel.columnWeights = new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.0, Double.MIN_VALUE};
		gbl_panel.rowWeights = new double[]{0.0, Double.MIN_VALUE};
		panel.setLayout(gbl_panel);
		
		panel_2 = new JPanel();
		panel_2.setPreferredSize(new Dimension(5, 10));
		panel_2.setMinimumSize(new Dimension(5, 10));
		GridBagConstraints gbc_panel_2 = new GridBagConstraints();
		gbc_panel_2.anchor = GridBagConstraints.WEST;
		gbc_panel_2.insets = new Insets(0, 0, 0, 5);
		gbc_panel_2.fill = GridBagConstraints.VERTICAL;
		gbc_panel_2.gridx = 0;
		gbc_panel_2.gridy = 0;
		panel.add(panel_2, gbc_panel_2);
		
		button = new JButton("");
		button.setMaximumSize(new Dimension(25, 25));
		button.setPreferredSize(new Dimension(40, 40));
		button.setContentAreaFilled(false);
		button.setOpaque(false);
		button.setIcon(new ImageIcon(DisplayBookListInfo.class.getResource("/resources/icon_search.png")));
		GridBagConstraints gbc_button = new GridBagConstraints();
		gbc_button.insets = new Insets(0, 0, 0, 5);
		gbc_button.gridx = 1;
		gbc_button.gridy = 0;
		panel.add(button, gbc_button);
		
		textField_search = new JTextField();
		textField_search.setLocation(new Point(5, 0));
		textField_search.setMargin(new Insets(2, 12, 2, 2));
		textField_search.setSize(new Dimension(200, 0));
		textField_search.setPreferredSize(new Dimension(25, 30));
		textField_search.setMaximumSize(new Dimension(500, 2147483647));
		textField_search.setMinimumSize(new Dimension(600, 29));
		GridBagConstraints gbc_textField_search = new GridBagConstraints();
		gbc_textField_search.fill = GridBagConstraints.HORIZONTAL;
		gbc_textField_search.insets = new Insets(0, 0, 0, 5);
		gbc_textField_search.gridx = 2;
		gbc_textField_search.gridy = 0;
		panel.add(textField_search, gbc_textField_search);
		textField_search.setColumns(10);
		textField_search.getDocument().addDocumentListener(new DocumentListener() {
			
			@Override
			public void removeUpdate(DocumentEvent e) {
				String text = textField_search.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
			}
			
			@Override
			public void insertUpdate(DocumentEvent e) {
				String text = textField_search.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
			}
			
			@Override
			public void changedUpdate(DocumentEvent e) {
				
			}
		});
		
		panel_1 = new JPanel();
		GridBagConstraints gbc_panel_1 = new GridBagConstraints();
		gbc_panel_1.insets = new Insets(0, 0, 0, 5);
		gbc_panel_1.fill = GridBagConstraints.BOTH;
		gbc_panel_1.gridx = 4;
		gbc_panel_1.gridy = 0;
		panel.add(panel_1, gbc_panel_1);
		
		button_prev = new JButton("");
		button_prev.setPreferredSize(new Dimension(25, 25));
		button_prev.setIcon(new ImageIcon(DisplayBookListInfo.class.getResource("/resources/arrow-left.png")));
		panel_1.add(button_prev);
		
		label_page = new JLabel("0");
		label_page.setIconTextGap(0);
		label_page.setHorizontalTextPosition(SwingConstants.CENTER);
		label_page.setHorizontalAlignment(SwingConstants.CENTER);
		label_page.setPreferredSize(new Dimension(20, 20));
		panel_1.add(label_page);
		
		button_next = new JButton("");
		button_next.setPreferredSize(new Dimension(25, 25));
		button_next.setIcon(new ImageIcon(DisplayBookListInfo.class.getResource("/resources/arrow-right.png")));
		panel_1.add(button_next);
		button_next.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(!isLastPage && bookInfoModel.getRowCount() == BookInfoModel.NUM_BOOK_PER_PAGE) {
					currentPage += 1;
					getBookOfPage(currentPage);
				}
			}
		});
		button_prev.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				currentPage -= 1;
				if(currentPage <= 0) currentPage = 1;
				
				if(bookInfoModel.getCurrentPage() != currentPage){
					getBookOfPage(currentPage);
				}
			}
		});

		lblDsfd = new JLabel("Static");
		lblDsfd.setOpaque(true);
		lblDsfd.setBackground(Color.decode("#B4CDE6"));
		lblDsfd.setPreferredSize(new Dimension(37, 20));
		lblDsfd.setBorder(new EmptyBorder(0, 10, 0, 0));
		lblDsfd.setSize(new Dimension(30, 20));
		lblDsfd.setMaximumSize(new Dimension(0, 20));
		lblDsfd.setMinimumSize(new Dimension(100, 20));
		lblDsfd.setFont(new Font("Tahoma", Font.PLAIN, 12));
		GridBagConstraints gbc_lblDsfd = new GridBagConstraints();
		gbc_lblDsfd.fill = GridBagConstraints.HORIZONTAL;
		gbc_lblDsfd.gridx = 0;
		gbc_lblDsfd.gridy = 3;
		getContentPane().add(lblDsfd, gbc_lblDsfd);

		// build poup menu
		popup = new JPopupMenu();
		//Add a new book
		JMenuItem menuItem = new JMenuItem("Thêm sách", new ImageIcon(DisplayBookListInfo.class
				.getResource("/resources/add_obj.gif")));
		menuItem.setMnemonic(KeyEvent.VK_0);
		menuItem.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				openBookInfoDialog(null, UpdateBookInfo2.MODE_ADD_NEW);
			}
		});
		popup.add(menuItem);
		//Delete a new book
		menuItem = new JMenuItem("Xóa sách", new ImageIcon(DisplayBookListInfo.class
				.getResource("/resources/delete_obj.gif")));
		menuItem.setMnemonic(KeyEvent.VK_1);
		menuItem.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				deleteBook();
			}
		});
		popup.add(menuItem);
		
		//Delete a new book
		menuItem = new JMenuItem("Cập nhật mới", new ImageIcon(DisplayBookListInfo.class
				.getResource("/resources/update.gif")));
		menuItem.setMnemonic(KeyEvent.VK_2);
		menuItem.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				int selectedRow = bookList.getSelectedRow();
				if (selectedRow >= 0) {
					pushMessageLog("Sending request to server...");
					performTask(new Runnable() {

						@Override
						public void run() {
							String dataFromServer = ServerAPI.sendGetRequest(
									ServerAPI.LINK_DELETE_BOOK,
									bookInfoModel.getBook(selectedRow).getId());
							System.out.println(dataFromServer);
							UpdatingBookResponse updatingBookResponse = gson
									.fromJson(dataFromServer,
											new TypeToken<UpdatingBookResponse>() {
											}.getType());
							if (updatingBookResponse != null && updatingBookResponse.isSuccess()) {
								pushMessageSuccess("Updated the book successfully.");
								bookInfoModel.updateBook(updatingBookResponse.getData());
							} else {
								pushMessageError("Unable to delete this book: "
										+ ((updatingBookResponse != null) ? updatingBookResponse.getMessage() : " null"));
							}
						}
					});
				}
			}
		});
		popup.add(menuItem);

		pack();
		setLocationRelativeTo(null);
	}// </editor-fold>//GEN-END:initComponents

	private void bookListMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_bookListMouseClicked
		if (evt.getClickCount() == 2) {// Double click a book
			JTable target = (JTable) evt.getSource();
			int row = target.getSelectedRow();
			BookInfoModel bookInfoModel;
			bookInfoModel = (BookInfoModel) target.getModel();
			openBookInfoDialog(bookInfoModel.getBook(row),
					UpdateBookInfo2.MODE_VIEW_UPDATE);
		}
	}// GEN-LAST:event_bookListMouseClicked

	private void jButton_delBookActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton_delBookActionPerformed
		deleteBook();
	}// GEN-LAST:event_jButton_delBookActionPerformed

	private void jButton_AddBookMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jButton_AddBookMouseClicked
		openBookInfoDialog(null, UpdateBookInfo2.MODE_ADD_NEW);
	}// GEN-LAST:event_jButton_AddBookMouseClicked

	private void getBookOfPage(int pageIndex){
		performTask(new Runnable() {
			@Override
			public void run() {
				//try {
					List<BookInfo> listBooks = bookInfoModel.getBookInfos();
					// Static data, Dá»¯ liá»‡u test
					//BufferedReader staticData = new BufferedReader(
					//		new FileReader(new File("resources\\fake_data.txt")));

					// Dynamic data, láº¥y vá»� tá»« server
					String dataFromServer = ServerAPI.sendGetRequestWidthPage(ServerAPI.LINK_GET_LIST_BOOKS, pageIndex);
					if (listBooks == null) {
						listBooks = new ArrayList<>();
					} else {
						listBooks.clear();
					}

					GettingAllBooksResponse gettingAllBooksResponse = gson
							.fromJson(dataFromServer,
									new TypeToken<GettingAllBooksResponse>() {
									}.getType());
					if (gettingAllBooksResponse != null && gettingAllBooksResponse.isSuccess()) {
						if(!gettingAllBooksResponse.getData()
								.getBooks().isEmpty()) {
							List<BookInfo> revBooks = gettingAllBooksResponse.getData().getBooks();
							Collections.sort(revBooks, new Comparator<BookInfo>() {

								@Override
								public int compare(BookInfo o1, BookInfo o2) {
									return o1.getTitle().compareTo(o2.getTitle());
								}
							});
							listBooks.addAll(revBooks);
							bookInfoModel.fireTableDataChanged();
							label_page.setText(gettingAllBooksResponse.getData().getPage() + "");
							bookInfoModel.setCurrentPage(gettingAllBooksResponse.getData().getPage());
							currentPage = gettingAllBooksResponse.getData().getPage();
							isLastPage = false;
							pushMessageSuccess("Got a list of books successfully");
						}else {
							currentPage = bookInfoModel.getCurrentPage();
							isLastPage = true;
						}
					} else {
						currentPage = bookInfoModel.getCurrentPage();
						pushMessageError("Getting all book is failed: "
								+ ((gettingAllBooksResponse != null) ? gettingAllBooksResponse.getMessage() : " null"));
					}
//				} catch (FileNotFoundException ex) {
//					Logger.getLogger(DisplayBookListInfo.class.getName()).log(
//							Level.SEVERE, null, ex);
//				}
			}
		});
	}
	private void deleteBook(){
		int selectedRow = bookList.getSelectedRow();
		if (selectedRow >= 0) {
			int result = JOptionPane.showConfirmDialog(this,
					"Bạn muốn xóa cuốn sách này?", "Hệ thống quản lý thư viện",
					JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
			if (result == JOptionPane.YES_OPTION) {
				pushMessageLog("Sending request to server...");
				performTask(new Runnable() {

					@Override
					public void run() {
						String dataFromServer = ServerAPI.sendDeleteRequest(
								ServerAPI.LINK_DELETE_BOOK,
								bookInfoModel.getBook(selectedRow).getId());
						System.out.println(dataFromServer);
						UpdatingBookResponse updatingBookResponse = gson
								.fromJson(dataFromServer,
										new TypeToken<UpdatingBookResponse>() {
										}.getType());
						if (updatingBookResponse.isSuccess()) {
							pushMessageSuccess("Deleted the book successfully.");
							bookInfoModel.deleteBook(selectedRow);
						} else {
							pushMessageError("Unable to delete this book: "
									+ ((updatingBookResponse != null) ? updatingBookResponse.getMessage() : " null"));
						}
					}
				});
			}
		}
	}
	
	private void openBookInfoDialog(BookInfo bookInfo, int mode) {
		UpdateBookInfo2 ubi = new UpdateBookInfo2(bookInfo, mode, this);
		ubi.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		ubi.setAlwaysOnTop(true);
		ubi.setLocationRelativeTo(this);
		ubi.setVisible(true);
		ubi.pack();
		ubi.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosed(WindowEvent e) {
				super.windowClosed(e); // To change body of generated methods,
										// choose Tools | Templates.
				DisplayBookListInfo.this.setEnabled(true);
			}

			@Override
			public void windowOpened(WindowEvent e) {
				super.windowOpened(e); // To change body of generated methods,
										// choose Tools | Templates.
				DisplayBookListInfo.this.setEnabled(false);
			}

		});
	}

	private void performTask(Runnable runnable) {
		progressDialog = new ProgressDialog(this, runnable, "Đang tải dữ liệu sách...");
		progressDialog.setTitle("Hệ thống quản lý thư viện");
		progressDialog.setLocationRelativeTo(this);
		progressDialog.setVisible(true);
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			Logger.getLogger(DisplayBookListInfo.class.getName()).log(
					Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			Logger.getLogger(DisplayBookListInfo.class.getName()).log(
					Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			Logger.getLogger(DisplayBookListInfo.class.getName()).log(
					Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			Logger.getLogger(DisplayBookListInfo.class.getName()).log(
					Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new DisplayBookListInfo().setVisible(true);
			}
		});
	}

	public static void pushMessageError(String msg) {
		lblDsfd.setText(msg);
		lblDsfd.setForeground(Color.RED);
	}

	public static void pushMessageSuccess(String msg) {
		lblDsfd.setText(msg);
		lblDsfd.setForeground(Color.decode("#149F5B"));
		//lblDsfd.setBackground(UIManager.getColor("InternalFrame.activeTitleBackground"));
	}

	public static void pushMessageLog(String msg) {
		lblDsfd.setText(msg);
		lblDsfd.setForeground(Color.BLACK);
		//lblDsfd.setBackground(UIManager.getColor("InternalFrame.activeTitleBackground"));
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JTable bookList;
	private javax.swing.JButton jButton_AddBook;
	private javax.swing.JButton jButton_delBook;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JToolBar jToolBar1;
	private GridBagConstraints gridBagConstraints_1;
	private static JLabel lblDsfd;
	private JPopupMenu popup;
	private JPanel panel;
	private JButton button_prev;
	private JButton button_next;
	private JLabel label_page;
	private JTextField textField_search;
	private JPanel panel_1;
	private JPanel panel_2;
	private JButton button;
	// End of variables declaration//GEN-END:variables

	@Override
	public void onUpdate(BookInfo bookInfo) {
		pushMessageLog("Sending to server...");
		performTask(new Runnable() {
			@Override
			public void run() {
				String dataFromServer = ServerAPI.sendPutRequest(
						ServerAPI.LINK_UPDATE_BOOK, bookInfo);
				System.out.println(dataFromServer);
				UpdatingBookResponse updatingBookResponse = gson.fromJson(
						dataFromServer, new TypeToken<UpdatingBookResponse>() {
						}.getType());
				if (updatingBookResponse != null && updatingBookResponse.isSuccess()) {
					bookInfoModel.updateBook(updatingBookResponse.getData());
					pushMessageSuccess("Updated the book successfully.");
				} else {
					pushMessageSuccess("Unable to update this book: "
							+ updatingBookResponse.getMessage());
				}
			}
		});
	}

	@Override
	public void onAddNew(BookInfo bookInfo) {
		pushMessageLog("Sending to server...");
		performTask(new Runnable() {
			@Override
			public void run() {
				String dataFromServer = ServerAPI.sendPostRequest(
						ServerAPI.LINK_ADD_BOOK, bookInfo);
				System.out.println(dataFromServer);
				UpdatingBookResponse updatingBookResponse = gson.fromJson(
						dataFromServer, new TypeToken<UpdatingBookResponse>() {
						}.getType());
				if (updatingBookResponse != null && updatingBookResponse.isSuccess()) {
					if(isLastPage) {
						if(bookInfoModel.getRowCount() < BookInfoModel.NUM_BOOK_PER_PAGE) {
							bookInfoModel.addBook(updatingBookResponse.getData());
						}else {
							getBookOfPage(currentPage + 1);
						}
					}
					pushMessageSuccess("Added the new book successfully.");
				} else {
					pushMessageSuccess("Unable to add this book:"
							+ updatingBookResponse.getMessage());
				}
			}
		});
	}
}
